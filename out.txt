[
    {
        "role": "user",
        "content": "pretty print hierarchy of directory given root in python"
    },
    {
        "role": "assistant",
        "content": "Here is an example of how to achieve this:\n\n```python\nimport os\n\ndef print_directory_hierarchy(start_path):\n    for root, directories, files in os.walk(start_path):\n        level = root.replace(start_path, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print(f'{indent}{os.path.basename(root)}/')\n        sub_indent = ' ' * 4 * (level + 1)\n        for file in files:\n            print(f'{sub_indent}{file}')\n\nprint_directory_hierarchy('/your/root/path')\n```\n\nThis script uses `os.walk()` to recursively go through all subdirectories and files of the given root directory. The amount of indentation is determined by the `level` of the current directory in the hierarchy, which is calculated by removing the root path from the current directory path and counting the number of separators (`os.sep`). The root directory and files are then printed with the appropriate indentation. Replace '/your/root/path' with the path to your root directory."
    },
    {
        "role": "user",
        "content": "now do the same thing but in javascript"
    },
    {
        "role": "assistant",
        "content": "You can use Node.js FileSystem module (`fs`), to read the directory structure and then print it. Here's how you can do it:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction printDirectoryHierarchy(startPath, indentation = '') {\n    const stats = fs.lstatSync(startPath);\n\n    console.log(indentation + path.basename(startPath));\n\n    if (stats.isDirectory()) {\n        const files = fs.readdirSync(startPath);\n\n        files.forEach(file => {\n            const absolutePath = path.join(startPath, file);\n\n            printDirectoryHierarchy(absolutePath, indentation + '    ');\n        });\n    }\n}\n\nprintDirectoryHierarchy('/your/root/path');\n```\nThis script will print the entire directory tree under '/your/root/path' (replace this with your directory path). Each level of hierarchy will be indented by 4 spaces. If a directory is encountered, the function is called recursively with the new path and increased indentation. \n\nThe `printDirectoryHierarchy` function checks if the path is a directory. If it's directory, it gets the list of files and directories in it and recursively call the same function."
    }
]